package com.p6spy.engine.wrapper;

import com.p6spy.engine.common.ResultSetInformation;
import com.p6spy.engine.common.StatementInformation;
import com.p6spy.engine.event.JdbcEventListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class StatementWrapper extends AbstractWrapper implements Statement {
   private static final String LINE_SEPARATOR = System.getProperty("line.separator");
   private final Statement delegate;
   protected final JdbcEventListener eventListener;
   private final StatementInformation statementInformation;

   public static Statement wrap(Statement delegate, StatementInformation statementInformation, JdbcEventListener eventListener) {
      return delegate == null ? null : new StatementWrapper(delegate, statementInformation, eventListener);
   }

   protected StatementWrapper(Statement delegate, StatementInformation statementInformation, JdbcEventListener eventListener) {
      super(delegate);
      this.delegate = delegate;
      this.eventListener = eventListener;
      this.statementInformation = statementInformation;
   }

   public ResultSet getResultSet() throws SQLException {
      SQLException e = null;
      long start = System.nanoTime();

      ResultSet var4;
      try {
         var4 = ResultSetWrapper.wrap(this.delegate.getResultSet(), new ResultSetInformation(this.statementInformation), this.eventListener);
      } catch (SQLException var8) {
         e = var8;
         throw var8;
      } finally {
         this.eventListener.onAfterGetResultSet(this.statementInformation, System.nanoTime() - start, e);
      }

      return var4;
   }

   public ResultSet executeQuery(String sql) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();

      ResultSet var5;
      try {
         this.eventListener.onBeforeExecuteQuery(this.statementInformation, sql);
         var5 = ResultSetWrapper.wrap(this.delegate.executeQuery(sql), new ResultSetInformation(this.statementInformation), this.eventListener);
      } catch (SQLException var9) {
         e = var9;
         throw var9;
      } finally {
         this.eventListener.onAfterExecuteQuery(this.statementInformation, System.nanoTime() - start, sql, e);
      }

      return var5;
   }

   public int[] executeBatch() throws SQLException {
      SQLException e = null;
      long start = System.nanoTime();
      int[] updateCounts = null;

      int[] var5;
      try {
         this.eventListener.onBeforeExecuteBatch(this.statementInformation);
         updateCounts = this.delegate.executeBatch();
         var5 = updateCounts;
      } catch (SQLException var9) {
         e = var9;
         throw var9;
      } finally {
         this.eventListener.onAfterExecuteBatch(this.statementInformation, System.nanoTime() - start, updateCounts, e);
      }

      return var5;
   }

   public boolean execute(String sql) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();

      boolean var5;
      try {
         this.eventListener.onBeforeExecute(this.statementInformation, sql);
         var5 = this.delegate.execute(sql);
      } catch (SQLException var9) {
         e = var9;
         throw var9;
      } finally {
         this.eventListener.onAfterExecute(this.statementInformation, System.nanoTime() - start, sql, e);
      }

      return var5;
   }

   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();

      boolean var6;
      try {
         this.eventListener.onBeforeExecute(this.statementInformation, sql);
         var6 = this.delegate.execute(sql, autoGeneratedKeys);
      } catch (SQLException var10) {
         e = var10;
         throw var10;
      } finally {
         this.eventListener.onAfterExecute(this.statementInformation, System.nanoTime() - start, sql, e);
      }

      return var6;
   }

   public boolean execute(String sql, int[] columnIndexes) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();

      boolean var6;
      try {
         this.eventListener.onBeforeExecute(this.statementInformation, sql);
         var6 = this.delegate.execute(sql, columnIndexes);
      } catch (SQLException var10) {
         e = var10;
         throw var10;
      } finally {
         this.eventListener.onAfterExecute(this.statementInformation, System.nanoTime() - start, sql, e);
      }

      return var6;
   }

   public boolean execute(String sql, String[] columnNames) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();

      boolean var6;
      try {
         this.eventListener.onBeforeExecute(this.statementInformation, sql);
         var6 = this.delegate.execute(sql, columnNames);
      } catch (SQLException var10) {
         e = var10;
         throw var10;
      } finally {
         this.eventListener.onAfterExecute(this.statementInformation, System.nanoTime() - start, sql, e);
      }

      return var6;
   }

   public int executeUpdate(String sql) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();
      int rowCount = 0;

      int var6;
      try {
         this.eventListener.onBeforeExecuteUpdate(this.statementInformation, sql);
         rowCount = this.delegate.executeUpdate(sql);
         var6 = rowCount;
      } catch (SQLException var10) {
         e = var10;
         throw var10;
      } finally {
         this.eventListener.onAfterExecuteUpdate(this.statementInformation, System.nanoTime() - start, sql, rowCount, e);
      }

      return var6;
   }

   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();
      int rowCount = 0;

      int var7;
      try {
         this.eventListener.onBeforeExecuteUpdate(this.statementInformation, sql);
         rowCount = this.delegate.executeUpdate(sql, autoGeneratedKeys);
         var7 = rowCount;
      } catch (SQLException var11) {
         e = var11;
         throw var11;
      } finally {
         this.eventListener.onAfterExecuteUpdate(this.statementInformation, System.nanoTime() - start, sql, rowCount, e);
      }

      return var7;
   }

   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();
      int rowCount = 0;

      int var7;
      try {
         this.eventListener.onBeforeExecuteUpdate(this.statementInformation, sql);
         rowCount = this.delegate.executeUpdate(sql, columnIndexes);
         var7 = rowCount;
      } catch (SQLException var11) {
         e = var11;
         throw var11;
      } finally {
         this.eventListener.onAfterExecuteUpdate(this.statementInformation, System.nanoTime() - start, sql, rowCount, e);
      }

      return var7;
   }

   public int executeUpdate(String sql, String[] columnNames) throws SQLException {
      this.statementInformation.setStatementQuery(sql);
      SQLException e = null;
      long start = System.nanoTime();
      int rowCount = 0;

      int var7;
      try {
         this.eventListener.onBeforeExecuteUpdate(this.statementInformation, sql);
         rowCount = this.delegate.executeUpdate(sql, columnNames);
         var7 = rowCount;
      } catch (SQLException var11) {
         e = var11;
         throw var11;
      } finally {
         this.eventListener.onAfterExecuteUpdate(this.statementInformation, System.nanoTime() - start, sql, rowCount, e);
      }

      return var7;
   }

   public void addBatch(String sql) throws SQLException {
      if (this.statementInformation.getStatementQuery() == null) {
         this.statementInformation.setStatementQuery(sql);
      } else {
         this.statementInformation.setStatementQuery(sql + LINE_SEPARATOR + this.statementInformation.getStatementQuery());
      }

      SQLException e = null;
      long start = System.nanoTime();

      try {
         this.eventListener.onBeforeAddBatch(this.statementInformation, sql);
         this.delegate.addBatch(sql);
      } catch (SQLException var9) {
         e = var9;
         throw var9;
      } finally {
         this.eventListener.onAfterAddBatch(this.statementInformation, System.nanoTime() - start, sql, e);
      }

   }

   public void close() throws SQLException {
      SQLException e = null;

      try {
         this.delegate.close();
      } catch (SQLException var6) {
         e = var6;
         throw var6;
      } finally {
         this.eventListener.onAfterStatementClose(this.statementInformation, e);
      }

   }

   public int getMaxFieldSize() throws SQLException {
      return this.delegate.getMaxFieldSize();
   }

   public void setMaxFieldSize(int max) throws SQLException {
      this.delegate.setMaxFieldSize(max);
   }

   public int getMaxRows() throws SQLException {
      return this.delegate.getMaxRows();
   }

   public void setMaxRows(int max) throws SQLException {
      this.delegate.setMaxRows(max);
   }

   public void setEscapeProcessing(boolean enable) throws SQLException {
      this.delegate.setEscapeProcessing(enable);
   }

   public int getQueryTimeout() throws SQLException {
      return this.delegate.getQueryTimeout();
   }

   public void setQueryTimeout(int seconds) throws SQLException {
      this.delegate.setQueryTimeout(seconds);
   }

   public void cancel() throws SQLException {
      this.delegate.cancel();
   }

   public SQLWarning getWarnings() throws SQLException {
      return this.delegate.getWarnings();
   }

   public void clearWarnings() throws SQLException {
      this.delegate.clearWarnings();
   }

   public void setCursorName(String name) throws SQLException {
      this.delegate.setCursorName(name);
   }

   public int getUpdateCount() throws SQLException {
      return this.delegate.getUpdateCount();
   }

   public boolean getMoreResults() throws SQLException {
      return this.delegate.getMoreResults();
   }

   public void setFetchDirection(int direction) throws SQLException {
      this.delegate.setFetchDirection(direction);
   }

   public int getFetchDirection() throws SQLException {
      return this.delegate.getFetchDirection();
   }

   public void setFetchSize(int rows) throws SQLException {
      this.delegate.setFetchSize(rows);
   }

   public int getFetchSize() throws SQLException {
      return this.delegate.getFetchSize();
   }

   public int getResultSetConcurrency() throws SQLException {
      return this.delegate.getResultSetConcurrency();
   }

   public int getResultSetType() throws SQLException {
      return this.delegate.getResultSetType();
   }

   public void clearBatch() throws SQLException {
      this.delegate.clearBatch();
   }

   public Connection getConnection() throws SQLException {
      return this.delegate.getConnection();
   }

   public boolean getMoreResults(int current) throws SQLException {
      return this.delegate.getMoreResults(current);
   }

   public ResultSet getGeneratedKeys() throws SQLException {
      return this.delegate.getGeneratedKeys();
   }

   public int getResultSetHoldability() throws SQLException {
      return this.delegate.getResultSetHoldability();
   }

   public boolean isClosed() throws SQLException {
      return this.delegate.isClosed();
   }

   public void setPoolable(boolean poolable) throws SQLException {
      this.delegate.setPoolable(poolable);
   }

   public boolean isPoolable() throws SQLException {
      return this.delegate.isPoolable();
   }

   public void closeOnCompletion() throws SQLException {
      this.delegate.closeOnCompletion();
   }

   public boolean isCloseOnCompletion() throws SQLException {
      return this.delegate.isCloseOnCompletion();
   }
}

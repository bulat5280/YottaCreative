package org.jooq.impl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import org.jooq.ConnectionProvider;
import org.jooq.tools.jdbc.DefaultConnection;

final class ProviderEnabledConnection extends DefaultConnection {
   private final ConnectionProvider connectionProvider;

   ProviderEnabledConnection(ConnectionProvider connectionProvider, Connection connection) {
      super(connection);
      this.connectionProvider = connectionProvider;
   }

   public final void close() throws SQLException {
      Connection connection = this.getDelegate();
      if (connection != null) {
         this.connectionProvider.release(connection);
      }

   }

   public final Statement createStatement() throws SQLException {
      return new ProviderEnabledStatement(this, this.getDelegate().createStatement());
   }

   public final Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
      return new ProviderEnabledStatement(this, this.getDelegate().createStatement(resultSetType, resultSetConcurrency));
   }

   public final Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      return new ProviderEnabledStatement(this, this.getDelegate().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
   }

   public final PreparedStatement prepareStatement(String sql) throws SQLException {
      return new ProviderEnabledPreparedStatement(this, this.getDelegate().prepareStatement(sql));
   }

   public final PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
      return new ProviderEnabledPreparedStatement(this, this.getDelegate().prepareStatement(sql, autoGeneratedKeys));
   }

   public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return new ProviderEnabledPreparedStatement(this, this.getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency));
   }

   public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      return new ProviderEnabledPreparedStatement(this, this.getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
   }

   public final PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
      return new ProviderEnabledPreparedStatement(this, this.getDelegate().prepareStatement(sql, columnIndexes));
   }

   public final PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
      return new ProviderEnabledPreparedStatement(this, this.getDelegate().prepareStatement(sql, columnNames));
   }

   public final CallableStatement prepareCall(String sql) throws SQLException {
      return new ProviderEnabledCallableStatement(this, this.getDelegate().prepareCall(sql));
   }

   public final CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return new ProviderEnabledCallableStatement(this, this.getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency));
   }

   public final CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      return new ProviderEnabledCallableStatement(this, this.getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
   }
}

package org.jooq.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import org.jooq.conf.Settings;
import org.jooq.conf.SettingsTools;
import org.jooq.tools.jdbc.DefaultConnection;

final class SettingsEnabledConnection extends DefaultConnection {
   private final Settings settings;

   SettingsEnabledConnection(Connection delegate, Settings settings) {
      super(delegate);
      this.settings = settings;
   }

   public final PreparedStatement prepareStatement(String sql) throws SQLException {
      return (PreparedStatement)(SettingsTools.executePreparedStatements(this.settings) ? this.getDelegate().prepareStatement(sql) : new SettingsEnabledPreparedStatement(this.getDelegate(), sql));
   }

   public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return (PreparedStatement)(SettingsTools.executePreparedStatements(this.settings) ? this.getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency) : new SettingsEnabledPreparedStatement(this.getDelegate(), sql, resultSetType, resultSetConcurrency));
   }

   public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      return (PreparedStatement)(SettingsTools.executePreparedStatements(this.settings) ? this.getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability) : new SettingsEnabledPreparedStatement(this.getDelegate(), sql, resultSetType, resultSetConcurrency, resultSetHoldability));
   }

   public final PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
      return (PreparedStatement)(SettingsTools.executePreparedStatements(this.settings) ? this.getDelegate().prepareStatement(sql, autoGeneratedKeys) : new SettingsEnabledPreparedStatement(this.getDelegate(), sql, autoGeneratedKeys));
   }

   public final PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
      return (PreparedStatement)(SettingsTools.executePreparedStatements(this.settings) ? this.getDelegate().prepareStatement(sql, columnIndexes) : new SettingsEnabledPreparedStatement(this.getDelegate(), sql, columnIndexes));
   }

   public final PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
      return (PreparedStatement)(SettingsTools.executePreparedStatements(this.settings) ? this.getDelegate().prepareStatement(sql, columnNames) : new SettingsEnabledPreparedStatement(this.getDelegate(), sql, columnNames));
   }
}

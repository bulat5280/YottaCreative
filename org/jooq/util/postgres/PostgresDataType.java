package org.jooq.util.postgres;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.UUID;
import org.jooq.DataType;
import org.jooq.Record;
import org.jooq.Result;
import org.jooq.SQLDialect;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.types.DayToSecond;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;
import org.jooq.types.YearToMonth;

public class PostgresDataType {
   public static final DataType<Short> SMALLINT;
   public static final DataType<Short> INT2;
   public static final DataType<Integer> INT;
   public static final DataType<Integer> INTEGER;
   public static final DataType<Integer> INT4;
   public static final DataType<Long> BIGINT;
   public static final DataType<Long> INT8;
   public static final DataType<Double> DOUBLEPRECISION;
   public static final DataType<Double> FLOAT8;
   public static final DataType<Float> REAL;
   public static final DataType<Float> FLOAT4;
   public static final DataType<Boolean> BOOLEAN;
   public static final DataType<Boolean> BOOL;
   public static final DataType<BigDecimal> NUMERIC;
   public static final DataType<BigDecimal> DECIMAL;
   public static final DataType<String> VARCHAR;
   public static final DataType<String> CHARACTERVARYING;
   public static final DataType<String> CHAR;
   public static final DataType<String> CHARACTER;
   public static final DataType<String> TEXT;
   public static final DataType<Date> DATE;
   public static final DataType<Time> TIME;
   public static final DataType<Timestamp> TIMESTAMP;
   public static final DataType<byte[]> BYTEA;
   public static final DataType<YearToMonth> INTERVALYEARTOMONTH;
   public static final DataType<DayToSecond> INTERVALDAYTOSECOND;
   protected static final DataType<byte[]> __BINARY;
   protected static final DataType<Boolean> __BIT;
   protected static final DataType<byte[]> __LONGVARBINARY;
   protected static final DataType<String> __LONGVARCHAR;
   protected static final DataType<String> __NCHAR;
   protected static final DataType<String> __NCLOB;
   protected static final DataType<String> __LONGNVARCHAR;
   protected static final DataType<String> __NVARCHAR;
   protected static final DataType<Byte> __TINYINT;
   protected static final DataType<byte[]> __VARBINARY;
   protected static final DataType<UByte> __TINYINTUNSIGNED;
   protected static final DataType<UShort> __SMALLINTUNSIGNED;
   protected static final DataType<UInteger> __INTEGERUNSIGNED;
   protected static final DataType<ULong> __BIGINTUNSIGNED;
   protected static final DataType<BigInteger> __BIGINTEGER;
   public static final DataType<Integer> SERIAL;
   public static final DataType<Integer> SERIAL4;
   public static final DataType<Long> BIGSERIAL;
   public static final DataType<Long> SERIAL8;
   public static final DataType<BigDecimal> MONEY;
   public static final DataType<String> BITVARYING;
   public static final DataType<String> VARBIT;
   public static final DataType<String> BIT;
   public static final DataType<String> BPCHAR;
   public static final DataType<Time> TIMEWITHOUTTIMEZONE;
   public static final DataType<Time> TIMEWITHTIMEZONE;
   public static final DataType<Time> TIMETZ;
   public static final DataType<Timestamp> TIMESTAMPWITHOUTTIMEZONE;
   public static final DataType<Timestamp> TIMESTAMPWITHTIMEZONE;
   public static final DataType<Timestamp> TIMESTAMPTZ;
   public static final DataType<Result<Record>> REFCURSOR;
   public static final DataType<Object> ANY;
   public static final DataType<UUID> UUID;
   public static final DataType<Object> JSON;
   public static final DataType<Long> OID;
   public static final DataType<Long> OIDVECTOR;
   public static final DataType<Long> XID;
   public static final DataType<Long> TID;
   public static final DataType<Long> CID;
   public static final DataType<String> ACLITEM;
   public static final DataType<String> NAME;
   public static final DataType<String> REGPROC;
   public static final DataType<Object> VOID;

   static {
      SMALLINT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.SMALLINT, "smallint");
      INT2 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.SMALLINT, "int2");
      INT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTEGER, "int");
      INTEGER = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTEGER, "integer");
      INT4 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTEGER, "int4");
      BIGINT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "bigint");
      INT8 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "int8");
      DOUBLEPRECISION = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.DOUBLE, "double precision");
      FLOAT8 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.FLOAT, "float8");
      REAL = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.REAL, "real");
      FLOAT4 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.REAL, "float4");
      BOOLEAN = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BOOLEAN, "boolean");
      BOOL = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BOOLEAN, "bool");
      NUMERIC = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.NUMERIC, "numeric");
      DECIMAL = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.DECIMAL, "decimal");
      VARCHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "varchar");
      CHARACTERVARYING = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "character varying");
      CHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.CHAR, "char");
      CHARACTER = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.CHAR, "character");
      TEXT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.CLOB, "text");
      DATE = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.DATE, "date");
      TIME = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIME, "time");
      TIMESTAMP = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIMESTAMP, "timestamp");
      BYTEA = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BLOB, "bytea");
      INTERVALYEARTOMONTH = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTERVALYEARTOMONTH, "interval year to month");
      INTERVALDAYTOSECOND = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTERVALDAYTOSECOND, "interval day to second");
      __BINARY = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BINARY, "bytea");
      __BIT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIT, "boolean");
      __LONGVARBINARY = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.LONGVARBINARY, "bytea");
      __LONGVARCHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.LONGVARCHAR, "varchar");
      __NCHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.NCHAR, "char");
      __NCLOB = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.NCLOB, "text");
      __LONGNVARCHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.LONGNVARCHAR, "varchar");
      __NVARCHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.NVARCHAR, "varchar");
      __TINYINT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TINYINT, "smallint");
      __VARBINARY = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARBINARY, "bytea");
      __TINYINTUNSIGNED = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TINYINTUNSIGNED, "smallint");
      __SMALLINTUNSIGNED = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.SMALLINTUNSIGNED, "int");
      __INTEGERUNSIGNED = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTEGERUNSIGNED, "bigint");
      __BIGINTUNSIGNED = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINTUNSIGNED, "decimal");
      __BIGINTEGER = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.DECIMAL_INTEGER, "decimal");
      SERIAL = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTEGER, "serial");
      SERIAL4 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.INTEGER, "serial4");
      BIGSERIAL = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "bigserial");
      SERIAL8 = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "serial8");
      MONEY = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.DECIMAL, "money");
      BITVARYING = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "bit varying");
      VARBIT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "varbit");
      BIT = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.CHAR, "bit");
      BPCHAR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.CHAR, "bpchar");
      TIMEWITHOUTTIMEZONE = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIME, "time without time zone");
      TIMEWITHTIMEZONE = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIME, "time with time zone");
      TIMETZ = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIME, "timetz");
      TIMESTAMPWITHOUTTIMEZONE = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIMESTAMP, "timestamp without time zone");
      TIMESTAMPWITHTIMEZONE = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIMESTAMP, "timestamp with time zone");
      TIMESTAMPTZ = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.TIMESTAMP, "timestamptz");
      REFCURSOR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.RESULT, "refcursor");
      ANY = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.OTHER, "any");
      UUID = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.UUID, "uuid");
      JSON = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.OTHER, "json");
      OID = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "oid");
      OIDVECTOR = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "oidvector");
      XID = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "xid");
      TID = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "tid");
      CID = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.BIGINT, "cid");
      ACLITEM = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "aclitem");
      NAME = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "name");
      REGPROC = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.VARCHAR, "regproc");
      VOID = new DefaultDataType(SQLDialect.POSTGRES, SQLDataType.OTHER, "void");
   }
}

package org.jooq.util.cubrid;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.UUID;
import org.jooq.DataType;
import org.jooq.SQLDialect;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;

public class CUBRIDDataType {
   public static final DataType<Integer> INT;
   public static final DataType<Integer> INTEGER;
   public static final DataType<Short> SHORT;
   public static final DataType<Short> SMALLINT;
   public static final DataType<Long> BIGINT;
   public static final DataType<BigDecimal> DECIMAL;
   public static final DataType<BigDecimal> DEC;
   public static final DataType<BigDecimal> NUMERIC;
   public static final DataType<Float> FLOAT;
   public static final DataType<Float> REAL;
   public static final DataType<Double> DOUBLE;
   public static final DataType<Double> DOUBLEPRECISION;
   public static final DataType<String> VARCHAR;
   public static final DataType<String> CHARVARYING;
   public static final DataType<String> CHARACTERVARYING;
   public static final DataType<String> CHAR;
   public static final DataType<String> CHARACTER;
   public static final DataType<String> STRING;
   public static final DataType<String> NCHAR;
   public static final DataType<String> CLOB;
   public static final DataType<Date> DATE;
   public static final DataType<Time> TIME;
   public static final DataType<Timestamp> DATETIME;
   public static final DataType<Timestamp> TIMESTAMP;
   public static final DataType<byte[]> BITVARYING;
   public static final DataType<byte[]> VARBIT;
   public static final DataType<byte[]> BIT;
   public static final DataType<byte[]> BLOB;
   protected static final DataType<Boolean> __BOOL;
   protected static final DataType<Boolean> __BIT;
   protected static final DataType<String> __LONGNVARCHAR;
   protected static final DataType<String> __NCLOB;
   protected static final DataType<String> __NVARCHAR;
   protected static final DataType<String> __LONGVARCHAR;
   protected static final DataType<byte[]> __LONGVARBINARY;
   protected static final DataType<Byte> __TINYINT;
   protected static final DataType<Double> __FLOAT;
   protected static final DataType<BigDecimal> __NUMERIC;
   protected static final DataType<UByte> __TINYINTUNSIGNED;
   protected static final DataType<UShort> __SMALLINTUNSIGNED;
   protected static final DataType<UInteger> __INTEGERUNSIGNED;
   protected static final DataType<ULong> __BIGINTUNSIGNED;
   protected static final DataType<BigInteger> __BIGINTEGER;
   protected static final DataType<UUID> __UUID;
   public static final DataType<Double> MONETARY;
   public static final DataType<String> ENUM;
   public static final DataType<Object> OBJECT;
   public static final DataType<Object> OID;
   public static final DataType<Object> ELO;
   public static final DataType<Object> MULTISET;
   public static final DataType<Object> SEQUENCE;
   public static final DataType<Object> SET;

   static {
      INT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.INTEGER, "int");
      INTEGER = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.INTEGER, "integer");
      SHORT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.SMALLINT, "short");
      SMALLINT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.SMALLINT, "smallint");
      BIGINT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.BIGINT, "bigint");
      DECIMAL = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DECIMAL, "decimal");
      DEC = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DECIMAL, "dec");
      NUMERIC = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DECIMAL, "numeric");
      FLOAT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.REAL, "float");
      REAL = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.REAL, "real");
      DOUBLE = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DOUBLE, "double");
      DOUBLEPRECISION = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DOUBLE, "double precision");
      VARCHAR = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARCHAR, "varchar");
      CHARVARYING = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARCHAR, "char varying");
      CHARACTERVARYING = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARCHAR, "character varying");
      CHAR = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.CHAR, "char", "varchar");
      CHARACTER = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.CHAR, "character", "varchar");
      STRING = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARCHAR, "string");
      NCHAR = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.NCHAR, "nchar");
      CLOB = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.CLOB, "clob");
      DATE = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DATE, "date");
      TIME = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.TIME, "time");
      DATETIME = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.TIMESTAMP, "datetime");
      TIMESTAMP = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.TIMESTAMP, "timestamp");
      BITVARYING = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARBINARY, "bit varying");
      VARBIT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARBINARY, "varbit");
      BIT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.BINARY, "bit");
      BLOB = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.BLOB, "blob");
      __BOOL = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.BOOLEAN, "bit", "bit(1)");
      __BIT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.BIT, "bit", "bit(1)");
      __LONGNVARCHAR = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.LONGNVARCHAR, "varchar");
      __NCLOB = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.NCLOB, "clob");
      __NVARCHAR = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.NVARCHAR, "varchar");
      __LONGVARCHAR = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.LONGVARCHAR, "varchar");
      __LONGVARBINARY = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.LONGVARBINARY, "blob");
      __TINYINT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.TINYINT, "smallint");
      __FLOAT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DOUBLE, "double");
      __NUMERIC = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.NUMERIC, "decimal");
      __TINYINTUNSIGNED = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.TINYINTUNSIGNED, "smallint");
      __SMALLINTUNSIGNED = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.SMALLINTUNSIGNED, "int");
      __INTEGERUNSIGNED = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.INTEGERUNSIGNED, "bigint");
      __BIGINTUNSIGNED = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.BIGINTUNSIGNED, "decimal");
      __BIGINTEGER = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DECIMAL_INTEGER, "decimal", "decimal");
      __UUID = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.UUID, "varchar");
      MONETARY = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.DOUBLE, "monetary");
      ENUM = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.VARCHAR, "enum", "varchar");
      OBJECT = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.OTHER, "object");
      OID = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.OTHER, "oid");
      ELO = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.OTHER, "elo");
      MULTISET = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.OTHER, "multiset");
      SEQUENCE = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.OTHER, "sequence");
      SET = new DefaultDataType(SQLDialect.CUBRID, SQLDataType.OTHER, "set");
   }
}

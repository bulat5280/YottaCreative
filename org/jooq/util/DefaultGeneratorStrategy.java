package org.jooq.util;

import java.util.ArrayList;
import java.util.List;
import org.jooq.tools.StringUtils;

public class DefaultGeneratorStrategy extends AbstractGeneratorStrategy {
   private String targetDirectory;
   private String targetPackage;
   private boolean instanceFields = true;

   public final void setInstanceFields(boolean instanceFields) {
      this.instanceFields = instanceFields;
   }

   public final boolean getInstanceFields() {
      return this.instanceFields;
   }

   public final String getTargetDirectory() {
      return this.targetDirectory;
   }

   public final void setTargetDirectory(String directory) {
      this.targetDirectory = directory;
   }

   public final String getTargetPackage() {
      return this.targetPackage;
   }

   public final void setTargetPackage(String packageName) {
      this.targetPackage = packageName;
   }

   public String getFileHeader(Definition definition, GeneratorStrategy.Mode mode) {
      return "This file is generated by jOOQ.";
   }

   public String getJavaIdentifier(Definition definition) {
      String identifier = this.getFixedJavaIdentifier(definition);
      return identifier != null ? identifier : definition.getOutputName().toUpperCase();
   }

   public String getJavaSetterName(Definition definition, GeneratorStrategy.Mode mode) {
      return "set" + this.getJavaClassName0(definition, GeneratorStrategy.Mode.DEFAULT);
   }

   public String getJavaGetterName(Definition definition, GeneratorStrategy.Mode mode) {
      return "get" + this.getJavaClassName0(definition, GeneratorStrategy.Mode.DEFAULT);
   }

   public String getJavaMethodName(Definition definition, GeneratorStrategy.Mode mode) {
      return this.getJavaClassName0LC(definition, GeneratorStrategy.Mode.DEFAULT);
   }

   public String getJavaClassExtends(Definition definition, GeneratorStrategy.Mode mode) {
      return null;
   }

   public List<String> getJavaClassImplements(Definition definition, GeneratorStrategy.Mode mode) {
      return new ArrayList();
   }

   public String getJavaClassName(Definition definition, GeneratorStrategy.Mode mode) {
      String name = this.getFixedJavaClassName(definition);
      return name != null ? name : this.getJavaClassName0(definition, mode);
   }

   public String getJavaPackageName(Definition definition, GeneratorStrategy.Mode mode) {
      StringBuilder sb = new StringBuilder();
      sb.append(this.getTargetPackage());
      if (definition.getDatabase().getCatalogs().size() > 1) {
         sb.append(".");
         sb.append(this.getJavaIdentifier(definition.getCatalog()).toLowerCase());
      }

      if (!(definition instanceof CatalogDefinition)) {
         if (definition.getDatabase().getSchemata().size() > 1) {
            sb.append(".");
            sb.append(this.getJavaIdentifier(definition.getSchema()).toLowerCase());
         }

         if (!(definition instanceof SchemaDefinition)) {
            if (!StringUtils.isBlank(this.getSubPackage(definition))) {
               sb.append(".");
               sb.append(this.getSubPackage(definition));
            }

            if (mode == GeneratorStrategy.Mode.RECORD) {
               sb.append(".records");
            } else if (mode == GeneratorStrategy.Mode.POJO) {
               sb.append(".pojos");
            } else if (mode == GeneratorStrategy.Mode.DAO) {
               sb.append(".daos");
            } else if (mode == GeneratorStrategy.Mode.INTERFACE) {
               sb.append(".interfaces");
            }
         }
      }

      return sb.toString();
   }

   public String getJavaMemberName(Definition definition, GeneratorStrategy.Mode mode) {
      return this.getJavaClassName0LC(definition, mode);
   }

   private String getJavaClassName0LC(Definition definition, GeneratorStrategy.Mode mode) {
      String result = this.getJavaClassName0(definition, mode);
      return result.substring(0, 1).toLowerCase() + result.substring(1);
   }

   private String getJavaClassName0(Definition definition, GeneratorStrategy.Mode mode) {
      StringBuilder result = new StringBuilder();
      result.append(StringUtils.toCamelCase(definition.getOutputName().replace(' ', '_').replace('-', '_').replace('.', '_')));
      if (mode == GeneratorStrategy.Mode.RECORD) {
         result.append("Record");
      } else if (mode == GeneratorStrategy.Mode.DAO) {
         result.append("Dao");
      } else if (mode == GeneratorStrategy.Mode.INTERFACE) {
         result.insert(0, "I");
      }

      return result.toString();
   }

   private final String getSubPackage(Definition definition) {
      if (definition instanceof TableDefinition) {
         return "tables";
      } else if (definition instanceof UDTDefinition) {
         UDTDefinition udt = (UDTDefinition)definition;
         return udt.getPackage() == null ? "udt" : "packages." + this.getJavaIdentifier(udt.getPackage()).toLowerCase();
      } else if (definition instanceof PackageDefinition) {
         return "packages";
      } else if (definition instanceof RoutineDefinition) {
         RoutineDefinition routine = (RoutineDefinition)definition;
         if (routine.getPackage() instanceof UDTDefinition) {
            return "udt." + this.getJavaIdentifier(routine.getPackage()).toLowerCase();
         } else {
            return routine.getPackage() != null ? "packages." + this.getJavaIdentifier(routine.getPackage()).toLowerCase() : "routines";
         }
      } else if (definition instanceof EnumDefinition) {
         return "enums";
      } else if (definition instanceof DomainDefinition) {
         return "domains";
      } else {
         return definition instanceof ArrayDefinition ? "udt" : "";
      }
   }

   public String getOverloadSuffix(Definition definition, GeneratorStrategy.Mode mode, String overloadIndex) {
      return overloadIndex;
   }
}

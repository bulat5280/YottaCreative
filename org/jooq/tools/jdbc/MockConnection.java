package org.jooq.tools.jdbc;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

public class MockConnection extends JDBC41Connection implements Connection {
   private final MockDataProvider data;
   private boolean isClosed;

   public MockConnection(MockDataProvider data) {
      this.data = data;
   }

   private void checkNotClosed() throws SQLException {
      if (this.isClosed) {
         throw new SQLException("Connection is already closed");
      }
   }

   public Statement createStatement() throws SQLException {
      return this.createStatement(1003, 1007, 2);
   }

   public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
      return this.createStatement(resultSetType, resultSetConcurrency, 2);
   }

   public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      this.checkNotClosed();
      MockStatement result = new MockStatement(this, this.data);
      result.resultSetType = resultSetType;
      result.resultSetConcurrency = resultSetConcurrency;
      result.resultSetHoldability = resultSetHoldability;
      return result;
   }

   public PreparedStatement prepareStatement(String sql) throws SQLException {
      return this.prepareStatement(sql, 1003, 1007, 2);
   }

   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return this.prepareStatement(sql, resultSetType, resultSetConcurrency, 2);
   }

   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      this.checkNotClosed();
      MockStatement result = new MockStatement(this, this.data, sql);
      result.resultSetType = resultSetType;
      result.resultSetConcurrency = resultSetConcurrency;
      result.resultSetHoldability = resultSetHoldability;
      return result;
   }

   public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
      this.checkNotClosed();
      MockStatement result = new MockStatement(this, this.data, sql);
      result.autoGeneratedKeys = autoGeneratedKeys;
      return result;
   }

   public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
      this.checkNotClosed();
      MockStatement result = new MockStatement(this, this.data, sql);
      result.autoGeneratedKeys = 1;
      result.columnIndexes = columnIndexes;
      return result;
   }

   public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
      this.checkNotClosed();
      MockStatement result = new MockStatement(this, this.data, sql);
      result.autoGeneratedKeys = 1;
      result.columnNames = columnNames;
      return result;
   }

   public CallableStatement prepareCall(String sql) throws SQLException {
      return this.prepareCall(sql, 1003, 1007, 2);
   }

   public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return this.prepareCall(sql, resultSetType, resultSetConcurrency, 2);
   }

   public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      this.checkNotClosed();
      MockStatement result = new MockStatement(this, this.data, sql);
      result.resultSetType = resultSetType;
      result.resultSetConcurrency = resultSetConcurrency;
      result.resultSetHoldability = resultSetHoldability;
      return result;
   }

   public void commit() throws SQLException {
      this.checkNotClosed();
   }

   public void rollback() throws SQLException {
      this.checkNotClosed();
   }

   public void rollback(Savepoint savepoint) throws SQLException {
      this.checkNotClosed();
   }

   public void close() throws SQLException {
      this.isClosed = true;
   }

   public Savepoint setSavepoint() throws SQLException {
      this.checkNotClosed();
      return new MockSavepoint();
   }

   public Savepoint setSavepoint(String name) throws SQLException {
      this.checkNotClosed();
      return new MockSavepoint(name);
   }

   public void releaseSavepoint(Savepoint savepoint) throws SQLException {
      this.checkNotClosed();
   }

   public boolean isClosed() throws SQLException {
      return this.isClosed;
   }

   public void setAutoCommit(boolean autoCommit) throws SQLException {
      this.checkNotClosed();
   }

   public boolean getAutoCommit() throws SQLException {
      this.checkNotClosed();
      return false;
   }

   public void setReadOnly(boolean readOnly) throws SQLException {
      this.checkNotClosed();
   }

   public boolean isReadOnly() throws SQLException {
      this.checkNotClosed();
      return false;
   }

   public void setCatalog(String catalog) throws SQLException {
      this.checkNotClosed();
   }

   public String getCatalog() throws SQLException {
      this.checkNotClosed();
      return null;
   }

   public SQLWarning getWarnings() throws SQLException {
      this.checkNotClosed();
      return null;
   }

   public void clearWarnings() throws SQLException {
      this.checkNotClosed();
   }

   public void setTransactionIsolation(int level) throws SQLException {
      this.checkNotClosed();
   }

   public int getTransactionIsolation() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
      this.checkNotClosed();
   }

   public Map<String, Class<?>> getTypeMap() throws SQLException {
      this.checkNotClosed();
      return null;
   }

   public void setHoldability(int holdability) throws SQLException {
      this.checkNotClosed();
   }

   public int getHoldability() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public boolean isValid(int timeout) throws SQLException {
      this.checkNotClosed();
      return false;
   }

   public void setClientInfo(String name, String value) throws SQLClientInfoException {
   }

   public void setClientInfo(Properties properties) throws SQLClientInfoException {
   }

   public String getClientInfo(String name) throws SQLException {
      this.checkNotClosed();
      return null;
   }

   public Properties getClientInfo() throws SQLException {
      this.checkNotClosed();
      return null;
   }

   public DatabaseMetaData getMetaData() throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public <T> T unwrap(Class<T> iface) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public boolean isWrapperFor(Class<?> iface) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public String nativeSQL(String sql) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Clob createClob() throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Blob createBlob() throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public NClob createNClob() throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public SQLXML createSQLXML() throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }
}

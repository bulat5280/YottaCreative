package org.jooq.tools.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.jooq.Record;

public class MockStatement extends JDBC41Statement implements CallableStatement {
   private final MockConnection connection;
   private final MockDataProvider data;
   private final List<String> sql;
   private final List<List<Object>> bindings;
   private final List<Integer> outParameterTypes;
   private MockResult[] result;
   private int resultIndex;
   private boolean resultWasNull;
   private boolean isClosed;
   int resultSetType;
   int resultSetConcurrency;
   int resultSetHoldability;
   int autoGeneratedKeys;
   int[] columnIndexes;
   String[] columnNames;
   private int queryTimeout;
   private int maxRows;

   public MockStatement(MockConnection connection, MockDataProvider data) {
      this(connection, data, (String)null);
   }

   public MockStatement(MockConnection connection, MockDataProvider data, String sql) {
      this.resultSetType = 1003;
      this.resultSetConcurrency = 1007;
      this.resultSetHoldability = 2;
      this.autoGeneratedKeys = 2;
      this.connection = connection;
      this.data = data;
      this.sql = new ArrayList();
      this.bindings = new ArrayList();
      this.outParameterTypes = new ArrayList();
      if (sql != null) {
         this.sql.add(sql);
      }

      this.bindings.add(new ArrayList());
   }

   private List<Object> bindings() {
      return (List)this.bindings.get(this.bindings.size() - 1);
   }

   private void ensureBindingsCapacity(int index) {
      List<Object> b = this.bindings();
      if (b.size() < index) {
         b.addAll(Collections.nCopies(index - b.size(), (Object)null));
      }

   }

   private void ensureOutParameterTypesCapacity(int index) {
      if (this.outParameterTypes.size() < index) {
         this.outParameterTypes.addAll(Collections.nCopies(index - this.outParameterTypes.size(), (Integer)null));
      }

   }

   private void checkNotClosed() throws SQLException {
      if (this.isClosed) {
         throw new SQLException("Connection is already closed");
      }
   }

   public Connection getConnection() throws SQLException {
      return this.connection;
   }

   private boolean execute0(String localSql, int localResultSetType, int localResultSetConcurrency, int localResultSetHoldability, int localAutoGeneratedKeys, int[] localColumnIndexes, String[] localColumnNames) throws SQLException {
      this.checkNotClosed();
      MockExecuteContext context = new MockExecuteContext(new String[]{localSql}, new Object[][]{this.bindings().toArray()}, localAutoGeneratedKeys, localColumnIndexes, localColumnNames, unbox(this.outParameterTypes));
      this.result = this.data.execute(context);
      return this.result != null && this.result.length > 0 && this.result[this.resultIndex].data != null;
   }

   private static final int[] unbox(List<Integer> list) {
      int[] array = new int[list.size()];

      for(int i = 0; i < array.length; ++i) {
         Integer value = (Integer)list.get(i);
         array[i] = value == null ? 0 : value;
      }

      return array;
   }

   public ResultSet getGeneratedKeys() throws SQLException {
      return this.getResultSet();
   }

   public boolean getMoreResults() throws SQLException {
      return this.getMoreResults(1);
   }

   public boolean getMoreResults(int current) throws SQLException {
      return this.result != null && ++this.resultIndex < this.result.length;
   }

   public ResultSet getResultSet() throws SQLException {
      this.checkNotClosed();
      return this.result != null && this.resultIndex < this.result.length && this.result[this.resultIndex].data != null ? new MockResultSet(this.result[this.resultIndex].data, this.maxRows) : null;
   }

   public int getUpdateCount() throws SQLException {
      this.checkNotClosed();
      return this.result != null && this.resultIndex < this.result.length && this.result[this.resultIndex].data == null ? this.result[this.resultIndex].rows : -1;
   }

   public ResultSet executeQuery() throws SQLException {
      return this.executeQuery((String)this.sql.get(0));
   }

   public ResultSet executeQuery(String localSql) throws SQLException {
      this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
      return this.getResultSet();
   }

   public boolean execute() throws SQLException {
      return this.execute((String)this.sql.get(0));
   }

   public boolean execute(String localSql) throws SQLException {
      return this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
   }

   public boolean execute(String localSql, int localAutoGeneratedKeys) throws SQLException {
      return this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, localAutoGeneratedKeys, (int[])null, (String[])null);
   }

   public boolean execute(String localSql, int[] localColumnIndexes) throws SQLException {
      return this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, localColumnIndexes, (String[])null);
   }

   public boolean execute(String localSql, String[] localColumnNames) throws SQLException {
      return this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, (int[])null, localColumnNames);
   }

   public int executeUpdate() throws SQLException {
      return this.executeUpdate((String)this.sql.get(0));
   }

   public int executeUpdate(String localSql) throws SQLException {
      this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
      return this.getUpdateCount();
   }

   public int executeUpdate(String localSql, int localAutoGeneratedKeys) throws SQLException {
      this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, localAutoGeneratedKeys, (int[])null, (String[])null);
      return this.getUpdateCount();
   }

   public int executeUpdate(String localSql, int[] localColumnIndexes) throws SQLException {
      this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, localColumnIndexes, (String[])null);
      return this.getUpdateCount();
   }

   public int executeUpdate(String localSql, String[] localColumnNames) throws SQLException {
      this.execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, (int[])null, localColumnNames);
      return this.getUpdateCount();
   }

   public void addBatch() throws SQLException {
      this.checkNotClosed();
      this.bindings.add(new ArrayList());
   }

   public void addBatch(String localSql) throws SQLException {
      this.checkNotClosed();
      this.sql.add(localSql);
   }

   public void clearBatch() throws SQLException {
      this.checkNotClosed();
      this.sql.clear();
      this.bindings.clear();
      this.bindings.add(new ArrayList());
   }

   public int[] executeBatch() throws SQLException {
      this.checkNotClosed();
      Object[][] matrix = new Object[this.bindings.size() - 1][];

      for(int i = 0; i < this.bindings.size() - 1; ++i) {
         matrix[i] = ((List)this.bindings.get(i)).toArray();
      }

      this.result = this.data.execute(new MockExecuteContext((String[])this.sql.toArray(new String[0]), matrix));
      int[] rows = new int[this.result.length];

      for(int i = 0; i < this.result.length; ++i) {
         rows[i] = this.result[i].rows;
      }

      return rows;
   }

   public void clearParameters() throws SQLException {
      this.checkNotClosed();
      List<Object> b = this.bindings();

      for(int i = 0; i < b.size(); ++i) {
         b.set(i, (Object)null);
      }

   }

   public void setNull(int parameterIndex, int sqlType) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, (Object)null);
   }

   public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, (Object)null);
   }

   public void setBoolean(int parameterIndex, boolean x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setByte(int parameterIndex, byte x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setShort(int parameterIndex, short x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setInt(int parameterIndex, int x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setLong(int parameterIndex, long x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setFloat(int parameterIndex, float x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setDouble(int parameterIndex, double x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setString(int parameterIndex, String x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setNString(int parameterIndex, String value) throws SQLException {
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, value);
   }

   public void setBytes(int parameterIndex, byte[] x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setDate(int parameterIndex, Date x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setTime(int parameterIndex, Time x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setObject(int parameterIndex, Object x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setURL(int parameterIndex, URL x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x);
   }

   public void setArray(int parameterIndex, Array x) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.bindings().set(parameterIndex - 1, x.getArray());
   }

   private Record outParameters() throws SQLException {
      if (this.result != null && this.result.length != 0 && this.result[0].data != null && this.result[0].data.size() != 0) {
         return (Record)this.result[0].data.get(0);
      } else {
         throw new SQLException("No OUT Parameters available");
      }
   }

   private int translate(int parameterIndex) throws SQLException {
      if (parameterIndex > this.outParameterTypes.size()) {
         throw new SQLException("OUT parameter index too high: " + parameterIndex);
      } else {
         int index = -1;

         for(int i = 0; i < parameterIndex; ++i) {
            if (this.outParameterTypes.get(i) != null) {
               ++index;
            }
         }

         return index;
      }
   }

   public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {
      this.checkNotClosed();
      this.ensureBindingsCapacity(parameterIndex);
      this.ensureOutParameterTypesCapacity(parameterIndex);
      this.outParameterTypes.set(parameterIndex - 1, sqlType);
   }

   public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {
      this.registerOutParameter(parameterIndex, sqlType);
   }

   public void registerOutParameter(int parameterIndex, int sqlType, String typeName) throws SQLException {
      this.registerOutParameter(parameterIndex, sqlType);
   }

   public boolean wasNull() throws SQLException {
      return this.resultWasNull;
   }

   public String getString(int parameterIndex) throws SQLException {
      String value = (String)this.outParameters().get(this.translate(parameterIndex), String.class);
      this.resultWasNull = value == null;
      return value;
   }

   public String getNString(int parameterIndex) throws SQLException {
      String value = (String)this.outParameters().get(this.translate(parameterIndex), String.class);
      this.resultWasNull = value == null;
      return value;
   }

   public boolean getBoolean(int parameterIndex) throws SQLException {
      Boolean value = (Boolean)this.outParameters().get(this.translate(parameterIndex), Boolean.class);
      this.resultWasNull = value == null;
      return value == null ? false : value;
   }

   public byte getByte(int parameterIndex) throws SQLException {
      Byte value = (Byte)this.outParameters().get(this.translate(parameterIndex), Byte.class);
      this.resultWasNull = value == null;
      return value == null ? 0 : value;
   }

   public short getShort(int parameterIndex) throws SQLException {
      Short value = (Short)this.outParameters().get(this.translate(parameterIndex), Short.class);
      this.resultWasNull = value == null;
      return value == null ? 0 : value;
   }

   public int getInt(int parameterIndex) throws SQLException {
      Integer value = (Integer)this.outParameters().get(this.translate(parameterIndex), Integer.class);
      this.resultWasNull = value == null;
      return value == null ? 0 : value;
   }

   public long getLong(int parameterIndex) throws SQLException {
      Long value = (Long)this.outParameters().get(this.translate(parameterIndex), Long.class);
      this.resultWasNull = value == null;
      return value == null ? 0L : value;
   }

   public float getFloat(int parameterIndex) throws SQLException {
      Float value = (Float)this.outParameters().get(this.translate(parameterIndex), Float.class);
      this.resultWasNull = value == null;
      return value == null ? 0.0F : value;
   }

   public double getDouble(int parameterIndex) throws SQLException {
      Double value = (Double)this.outParameters().get(this.translate(parameterIndex), Double.class);
      this.resultWasNull = value == null;
      return value == null ? 0.0D : value;
   }

   public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException {
      BigDecimal value = (BigDecimal)this.outParameters().get(this.translate(parameterIndex), BigDecimal.class);
      this.resultWasNull = value == null;
      return value;
   }

   public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
      BigDecimal value = (BigDecimal)this.outParameters().get(this.translate(parameterIndex), BigDecimal.class);
      this.resultWasNull = value == null;
      return value;
   }

   public byte[] getBytes(int parameterIndex) throws SQLException {
      byte[] value = (byte[])this.outParameters().get(this.translate(parameterIndex), byte[].class);
      this.resultWasNull = value == null;
      return value;
   }

   public Date getDate(int parameterIndex) throws SQLException {
      Date value = (Date)this.outParameters().get(this.translate(parameterIndex), Date.class);
      this.resultWasNull = value == null;
      return value;
   }

   public Date getDate(int parameterIndex, Calendar cal) throws SQLException {
      Date value = (Date)this.outParameters().get(this.translate(parameterIndex), Date.class);
      this.resultWasNull = value == null;
      return value;
   }

   public Time getTime(int parameterIndex) throws SQLException {
      Time value = (Time)this.outParameters().get(this.translate(parameterIndex), Time.class);
      this.resultWasNull = value == null;
      return value;
   }

   public Time getTime(int parameterIndex, Calendar cal) throws SQLException {
      Time value = (Time)this.outParameters().get(this.translate(parameterIndex), Time.class);
      this.resultWasNull = value == null;
      return value;
   }

   public Timestamp getTimestamp(int parameterIndex) throws SQLException {
      Timestamp value = (Timestamp)this.outParameters().get(this.translate(parameterIndex), Timestamp.class);
      this.resultWasNull = value == null;
      return value;
   }

   public Timestamp getTimestamp(int parameterIndex, Calendar cal) throws SQLException {
      Timestamp value = (Timestamp)this.outParameters().get(this.translate(parameterIndex), Timestamp.class);
      this.resultWasNull = value == null;
      return value;
   }

   public Object getObject(int parameterIndex) throws SQLException {
      Object value = this.outParameters().get(this.translate(parameterIndex));
      this.resultWasNull = value == null;
      return value;
   }

   public Object getObject(int parameterIndex, Map<String, Class<?>> map) throws SQLException {
      Object value = this.outParameters().get(this.translate(parameterIndex));
      this.resultWasNull = value == null;
      return value;
   }

   public Array getArray(int parameterIndex) throws SQLException {
      Array value = (Array)this.outParameters().get(this.translate(parameterIndex), Array.class);
      this.resultWasNull = value == null;
      return value;
   }

   public URL getURL(int parameterIndex) throws SQLException {
      URL value = (URL)this.outParameters().get(this.translate(parameterIndex), URL.class);
      this.resultWasNull = value == null;
      return value;
   }

   public boolean isClosed() throws SQLException {
      return this.isClosed;
   }

   public void close() throws SQLException {
      this.isClosed = true;
   }

   public void cancel() throws SQLException {
      this.isClosed = true;
   }

   public int getMaxFieldSize() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public void setMaxFieldSize(int max) throws SQLException {
      this.checkNotClosed();
   }

   public int getMaxRows() throws SQLException {
      this.checkNotClosed();
      return this.maxRows;
   }

   public void setMaxRows(int max) throws SQLException {
      this.checkNotClosed();
      this.maxRows = max;
   }

   public void setEscapeProcessing(boolean enable) throws SQLException {
      this.checkNotClosed();
   }

   public int getQueryTimeout() throws SQLException {
      this.checkNotClosed();
      return this.queryTimeout;
   }

   public void setQueryTimeout(int seconds) throws SQLException {
      this.checkNotClosed();
      this.queryTimeout = seconds;
   }

   public void setFetchDirection(int direction) throws SQLException {
      this.checkNotClosed();
   }

   public int getFetchDirection() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public void setFetchSize(int rows) throws SQLException {
      this.checkNotClosed();
   }

   public int getFetchSize() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public int getResultSetConcurrency() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public int getResultSetType() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public int getResultSetHoldability() throws SQLException {
      this.checkNotClosed();
      return 0;
   }

   public void setPoolable(boolean poolable) throws SQLException {
      this.checkNotClosed();
   }

   public boolean isPoolable() throws SQLException {
      this.checkNotClosed();
      return false;
   }

   public SQLWarning getWarnings() throws SQLException {
      this.checkNotClosed();
      return null;
   }

   public void clearWarnings() throws SQLException {
      this.checkNotClosed();
   }

   public void setCursorName(String name) throws SQLException {
      this.checkNotClosed();
   }

   public ResultSetMetaData getMetaData() throws SQLException {
      this.checkNotClosed();
      throw new SQLException("Can this be ignored?");
   }

   public <T> T unwrap(Class<T> iface) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public boolean isWrapperFor(Class<?> iface) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public ParameterMetaData getParameterMetaData() throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setAsciiStream(String parameterName, InputStream x, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setAsciiStream(String parameterName, InputStream x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBinaryStream(String parameterName, InputStream x, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBinaryStream(String parameterName, InputStream x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setCharacterStream(String parameterName, Reader reader, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setCharacterStream(String parameterName, Reader reader) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNCharacterStream(String parameterName, Reader value) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNCharacterStream(String parameterName, Reader value, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setRef(int parameterIndex, Ref x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBlob(int parameterIndex, Blob x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBlob(String parameterName, Blob x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBlob(String parameterName, InputStream inputStream) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBlob(String parameterName, InputStream inputStream, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setClob(int parameterIndex, Clob x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setClob(int parameterIndex, Reader reader) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setClob(String parameterName, Clob x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setClob(String parameterName, Reader reader) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setClob(String parameterName, Reader reader, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNClob(int parameterIndex, NClob value) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNClob(int parameterIndex, Reader reader) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNClob(String parameterName, NClob value) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNClob(String parameterName, Reader reader, long length) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNClob(String parameterName, Reader reader) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNString(String parameterName, String value) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setRowId(int parameterIndex, RowId x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setRowId(String parameterName, RowId x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setSQLXML(String parameterName, SQLXML xmlObject) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setDate(String parameterName, Date x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setTime(String parameterName, Time x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setURL(String parameterName, URL val) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNull(String parameterName, int sqlType) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBoolean(String parameterName, boolean x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setByte(String parameterName, byte x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setShort(String parameterName, short x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setInt(String parameterName, int x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setLong(String parameterName, long x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setFloat(String parameterName, float x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setDouble(String parameterName, double x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setString(String parameterName, String x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setBytes(String parameterName, byte[] x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void setObject(String parameterName, Object x) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public String getString(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public boolean getBoolean(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public byte getByte(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public short getShort(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public int getInt(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public long getLong(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public float getFloat(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public double getDouble(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public byte[] getBytes(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Date getDate(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Time getTime(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Timestamp getTimestamp(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Object getObject(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public BigDecimal getBigDecimal(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Object getObject(String parameterName, Map<String, Class<?>> map) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Ref getRef(int parameterIndex) throws SQLException {
      return null;
   }

   public Ref getRef(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Blob getBlob(int parameterIndex) throws SQLException {
      return null;
   }

   public Blob getBlob(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Clob getClob(int parameterIndex) throws SQLException {
      return null;
   }

   public Clob getClob(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public NClob getNClob(int parameterIndex) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public NClob getNClob(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public String getNString(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Reader getNCharacterStream(int parameterIndex) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Reader getNCharacterStream(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Reader getCharacterStream(int parameterIndex) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Reader getCharacterStream(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Array getArray(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Date getDate(String parameterName, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Time getTime(String parameterName, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public URL getURL(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public RowId getRowId(int parameterIndex) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public RowId getRowId(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public SQLXML getSQLXML(int parameterIndex) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }

   public SQLXML getSQLXML(String parameterName) throws SQLException {
      throw new SQLFeatureNotSupportedException("Unsupported Operation");
   }
}

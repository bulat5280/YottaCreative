package org.jooq.tools.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class DefaultStatement extends JDBC41Statement implements Statement {
   private Statement delegate;

   public DefaultStatement(Statement delegate) {
      this.delegate = delegate;
   }

   public Statement getDelegate() {
      return this.delegate;
   }

   public boolean execute(String sql) throws SQLException {
      return this.getDelegate().execute(sql);
   }

   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
      return this.getDelegate().execute(sql, autoGeneratedKeys);
   }

   public boolean execute(String sql, int[] columnIndexes) throws SQLException {
      return this.getDelegate().execute(sql, columnIndexes);
   }

   public boolean execute(String sql, String[] columnNames) throws SQLException {
      return this.getDelegate().execute(sql, columnNames);
   }

   public int[] executeBatch() throws SQLException {
      return this.getDelegate().executeBatch();
   }

   public ResultSet executeQuery(String sql) throws SQLException {
      return this.getDelegate().executeQuery(sql);
   }

   public int executeUpdate(String sql) throws SQLException {
      return this.getDelegate().executeUpdate(sql);
   }

   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
      return this.getDelegate().executeUpdate(sql, autoGeneratedKeys);
   }

   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
      return this.getDelegate().executeUpdate(sql, columnIndexes);
   }

   public int executeUpdate(String sql, String[] columnNames) throws SQLException {
      return this.getDelegate().executeUpdate(sql, columnNames);
   }

   public <T> T unwrap(Class<T> iface) throws SQLException {
      return this.delegate.unwrap(iface);
   }

   public boolean isWrapperFor(Class<?> iface) throws SQLException {
      return this.delegate.isWrapperFor(iface);
   }

   public void close() throws SQLException {
      this.delegate.close();
   }

   public int getMaxFieldSize() throws SQLException {
      return this.delegate.getMaxFieldSize();
   }

   public void setMaxFieldSize(int max) throws SQLException {
      this.delegate.setMaxFieldSize(max);
   }

   public int getMaxRows() throws SQLException {
      return this.delegate.getMaxRows();
   }

   public void setMaxRows(int max) throws SQLException {
      this.delegate.setMaxRows(max);
   }

   public void setEscapeProcessing(boolean enable) throws SQLException {
      this.delegate.setEscapeProcessing(enable);
   }

   public int getQueryTimeout() throws SQLException {
      return this.delegate.getQueryTimeout();
   }

   public void setQueryTimeout(int seconds) throws SQLException {
      this.delegate.setQueryTimeout(seconds);
   }

   public void cancel() throws SQLException {
      this.delegate.cancel();
   }

   public SQLWarning getWarnings() throws SQLException {
      return this.delegate.getWarnings();
   }

   public void clearWarnings() throws SQLException {
      this.delegate.clearWarnings();
   }

   public void setCursorName(String name) throws SQLException {
      this.delegate.setCursorName(name);
   }

   public ResultSet getResultSet() throws SQLException {
      return this.delegate.getResultSet();
   }

   public int getUpdateCount() throws SQLException {
      return this.delegate.getUpdateCount();
   }

   public boolean getMoreResults() throws SQLException {
      return this.delegate.getMoreResults();
   }

   public void setFetchDirection(int direction) throws SQLException {
      this.delegate.setFetchDirection(direction);
   }

   public int getFetchDirection() throws SQLException {
      return this.delegate.getFetchDirection();
   }

   public void setFetchSize(int rows) throws SQLException {
      this.delegate.setFetchSize(rows);
   }

   public int getFetchSize() throws SQLException {
      return this.delegate.getFetchSize();
   }

   public int getResultSetConcurrency() throws SQLException {
      return this.delegate.getResultSetConcurrency();
   }

   public int getResultSetType() throws SQLException {
      return this.delegate.getResultSetType();
   }

   public void addBatch(String sql) throws SQLException {
      this.delegate.addBatch(sql);
   }

   public void clearBatch() throws SQLException {
      this.delegate.clearBatch();
   }

   public Connection getConnection() throws SQLException {
      return this.delegate.getConnection();
   }

   public boolean getMoreResults(int current) throws SQLException {
      return this.delegate.getMoreResults(current);
   }

   public ResultSet getGeneratedKeys() throws SQLException {
      return this.delegate.getGeneratedKeys();
   }

   public int getResultSetHoldability() throws SQLException {
      return this.delegate.getResultSetHoldability();
   }

   public boolean isClosed() throws SQLException {
      return this.delegate.isClosed();
   }

   public void setPoolable(boolean poolable) throws SQLException {
      this.delegate.setPoolable(poolable);
   }

   public boolean isPoolable() throws SQLException {
      return this.delegate.isPoolable();
   }
}
